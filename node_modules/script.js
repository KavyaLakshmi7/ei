const express = require('express');
const Joi = require('joi'); // Ensure Joi is imported with the correct capitalization
const app = express();
app.use(express.json()); // Fixed: Missing parentheses for `express.json()`

const data = [
    { title: 'david', id: '1' },
    { title: 'siva', id: '2' },
    { title: 'jai', id: '3' },
    { title: 'aruna', id: '4' },
    { title: 'sheena', id: '5' }
];

// Root endpoint
app.get('/', (req, res) => {
    res.send("Welcome to the API!");
});

// Get all data
app.get('/api/data', (req, res) => {
    res.send(data);
});

// Get a specific item by ID
app.get('/api/data/:id', (req, res) => {
    const person = data.find(c => c.id === req.params.id); // IDs are strings, so no need for parseInt
    if (!person) {
        res.status(404).send('<h2 style="font-family: Malgun Gothic; color: darkred;">Oops.. can\'t find that</h2>');
        return;
    }
    res.send(person);
});

// Add a new item
app.post('/api/data', (req, res) => {
    const { error } = validateCustomer(req.body);
    if (error) {
        res.status(400).send(error.details[0].message);
        return;
    }
    const person = {
        id: (data.length + 1).toString(), // Ensure ID is a string
        title: req.body.title
    };
    data.push(person);
    res.send(person);
});

// Update an existing item
app.put('/api/data/:id', (req, res) => {
    const person = data.find(c => c.id === req.params.id);
    if (!person) {
        res.status(404).send('<h2 style="font-family: Malgun Gothic; color: darkred;">Oops.. can\'t find that</h2>');
        return;
    }

    const { error } = validateCustomer(req.body);
    if (error) {
        res.status(400).send(error.details[0].message);
        return;
    }

    person.title = req.body.title;
    res.send(person);
});

// Delete an item
app.delete('/api/data/:id', (req, res) => {
    const person = data.find(c => c.id === req.params.id);
    if (!person) {
        res.status(404).send('<h2 style="font-family: Malgun Gothic; color: darkred;">Oops.. can\'t find that</h2>');
        return;
    }

    const index = data.indexOf(person);
    data.splice(index, 1);
    res.send(person);
});

// Validation function
function validateCustomer(customer) {
    const schema = Joi.object({
        title: Joi.string().min(3).required()
    });
    return schema.validate(customer); // Updated to use Joi's current API
}

// Start the server
const port = process.env.PORT || 3000;
app.listen(port, () => console.log(`Listening on port ${port}...`));
